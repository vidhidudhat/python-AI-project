# -*- coding: utf-8 -*-
"""water_potability.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mGWsvycCRSVnquZY4Sx0ANibZhJK1LUt
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
from imblearn.over_sampling import SMOTE

data = pd.read_csv("water_potabilty.csv")

X = data.drop(columns=["potability"])
y = data["potability"]

imputer = SimpleImputer(strategy="mean")
X_imputed = imputer.fit_transform(X)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)

smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

model = LogisticRegression(random_state=42, max_iter=1000)
model.fit(X_train_smote, y_train_smote)

y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))

def predict_from_dataset(index=0):
    # Select a row from the test dataset
    test_instance = X_test[index].reshape(1, -1)  # Reshape to 2D array
    actual_label = y_test.iloc[index]  # Get the actual label for reference

# Function to predict water quality using the test dataset
def predict_from_dataset(index=0):
    # Select a row from the test dataset
    test_instance = X_test[index].reshape(1, -1)  # Reshape to 2D array
    actual_label = y_test.iloc[index]  # Get the actual label for reference

    # Make a prediction
    prediction = model.predict(test_instance)
    output = "Potable" if prediction[0] == 1 else "Non-potable"
    actual_output = "Potable" if actual_label == 1 else "Non-potable"

    print("\nPrediction Results:")
    print("Input Features:")
    for feature, value in zip(X.columns, scaler.inverse_transform(test_instance)[0]):
        print(f"  - {feature}: {value:.2f}")
    print("\nOutput:")
    print(f"  - Predicted Water Quality: {output}")
    print(f"  - Actual Water Quality: {actual_output}")

predict_from_dataset(index=0)